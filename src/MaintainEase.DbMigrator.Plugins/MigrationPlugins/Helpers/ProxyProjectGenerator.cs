using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using MaintainEase.DbMigrator.Plugins.MigrationPlugins.Models;

namespace MaintainEase.DbMigrator.Plugins.MigrationPlugins.Helpers
{
    /// <summary>
    /// Generator for temporary proxy projects
    /// </summary>
    public class ProxyProjectGenerator
    {
        private readonly ILogger _logger;

        public ProxyProjectGenerator(ILogger logger = null)
        {
            _logger = logger;
        }

        /// <summary>
        /// Create a minimal proxy project that helps with DbContext discovery
        /// </summary>
        public async Task CreateProxyProjectAsync(string proxyDir, string infrastructureProjectPath, List<DbContextInfo> dbContexts)
        {
            // Create a minimal project file that references Infrastructure
            string projectContent = $@"<Project Sdk=""Microsoft.NET.Sdk"">
  <PropertyGroup>
    <TargetFramework>net9.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include=""Microsoft.EntityFrameworkCore.Design"" Version=""6.0.0"" PrivateAssets=""all"" />
    <PackageReference Include=""Microsoft.EntityFrameworkCore.SqlServer"" Version=""6.0.0"" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include=""{infrastructureProjectPath}\MaintainEase.Infrastructure.csproj"" />
  </ItemGroup>
</Project>";

            await File.WriteAllTextAsync(Path.Combine(proxyDir, "MigrationProxy.csproj"), projectContent);

            // Create a factory class for each discovered DbContext
            foreach (var context in dbContexts)
            {
                // Create a design-time factory for the context
                string factoryContent = $@"// <auto-generated/>
using System;
using System.IO;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Design;
using Microsoft.Extensions.Configuration;

namespace MigrationProxy.DesignTimeFactories
{{
    // Design-time factory for {context.Name}
    public class {context.Name}Factory : IDesignTimeDbContextFactory<{context.FullName}>
    {{
        public {context.FullName} CreateDbContext(string[] args)
        {{
            string connectionString = Environment.GetEnvironmentVariable(""ConnectionStrings__DefaultConnection"") ?? 
                                     ""Server=localhost;Database=MaintainEase;Trusted_Connection=True;TrustServerCertificate=true;MultipleActiveResultSets=true"";
            
            Console.WriteLine($""Using connection string: {{MaskConnectionString(connectionString)}}"");
            
            // Parse command line args for connection string
            for (int i = 0; i < args.Length; i++)
            {{
                if (args[i] == ""--connection"" && i + 1 < args.Length)
                {{
                    connectionString = args[i + 1];
                    Console.WriteLine($""Overriding with connection string from args: {{MaskConnectionString(connectionString)}}"");
                    break;
                }}
            }}
            
            var optionsBuilder = new DbContextOptionsBuilder<{context.FullName}>();
            optionsBuilder.UseSqlServer(connectionString);
            
            // Try to create an instance of the DbContext
            try {{
                return ({context.FullName})Activator.CreateInstance(
                    typeof({context.FullName}), 
                    optionsBuilder.Options);
            }}
            catch (Exception ex) {{
                Console.WriteLine($""Error creating {context.Name}: {{ex.Message}}"");
                Console.WriteLine(ex.StackTrace);
                
                // Create with minimal dependencies - for migration commands only
                Console.WriteLine(""Trying to create with minimal dependencies for migration operations"");
                
                var constructors = typeof({context.FullName}).GetConstructors();
                foreach (var constructor in constructors) {{
                    Console.WriteLine($""Found constructor with {{constructor.GetParameters().Length}} parameters"");
                }}
                
                throw;
            }}
        }}
        
        private string MaskConnectionString(string connectionString)
        {{
            if (string.IsNullOrEmpty(connectionString))
                return ""[empty]"";

            return System.Text.RegularExpressions.Regex.Replace(
                connectionString,
                @""(Password|pwd)=([^;]*)"",
                ""$1=********"",
                System.Text.RegularExpressions.RegexOptions.IgnoreCase);
        }}
    }}
}}";

                // Create file
                var factoryDir = Path.Combine(proxyDir, "DesignTimeFactories");
                Directory.CreateDirectory(factoryDir);
                await File.WriteAllTextAsync(Path.Combine(factoryDir, $"{context.Name}Factory.cs"), factoryContent);
            }

            // Create a minimal Program.cs file with DbContext extension to help EF Core discover our DbContexts
            string programContent = $@"// Migration proxy application
using System;
using System.Linq;
using System.Reflection;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Design;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.Extensions.DependencyInjection;

namespace MigrationProxy
{{
    public class Program
    {{
        public static void Main(string[] args)
        {{
            Console.WriteLine(""Migration proxy running..."");
            Console.WriteLine(""Available DbContexts:"");

            // List available DbContexts for diagnostics
            {string.Join("\n            ", dbContexts.Select(c => $"Console.WriteLine(\"  - {c.Name} ({c.FullName})\");"))}
            
            // If no args or help requested, show usage
            if (args.Length == 0 || args.Contains(""--help"") || args.Contains(""-h""))
            {{
                ShowUsage();
                return;
            }}
        }}
        
        private static void ShowUsage()
        {{
            Console.WriteLine(""Usage: MigrationProxy <command> [options]"");
            Console.WriteLine();
            Console.WriteLine(""Commands:"");
            Console.WriteLine(""  migrations add <name>     Add a new migration"");
            Console.WriteLine(""  migrations list          List available migrations"");
            Console.WriteLine(""  database update          Apply migrations to the database"");
            Console.WriteLine();
            Console.WriteLine(""Options:"");
            Console.WriteLine(""  --context <context>      The DbContext to use"");
            Console.WriteLine(""  --connection <string>    The connection string to use"");
        }}
    }}
}}";
            await File.WriteAllTextAsync(Path.Combine(proxyDir, "Program.cs"), programContent);

            // Restore and build the project
            string restoreScriptPath = Path.Combine(Path.GetTempPath(), $"restore_proxy_{Guid.NewGuid()}.cmd");
            await File.WriteAllTextAsync(restoreScriptPath, $"@echo off\ncd \"{proxyDir}\"\ndotnet restore\ndotnet build");

            var process = new Process
            {
                StartInfo = new ProcessStartInfo
                {
                    FileName = "cmd.exe",
                    Arguments = $"/c \"{restoreScriptPath}\"",
                    RedirectStandardOutput = true,
                    RedirectStandardError = true,
                    UseShellExecute = false,
                    CreateNoWindow = true
                }
            };

            process.Start();
            string output = await process.StandardOutput.ReadToEndAsync();
            string error = await process.StandardError.ReadToEndAsync();
            await process.WaitForExitAsync();

            try { File.Delete(restoreScriptPath); } catch { /* Ignore errors */ }

            if (process.ExitCode != 0)
            {
                _logger?.LogError("Failed to build proxy project: {Error}", error);
                throw new Exception($"Failed to build proxy project: {error}");
            }

            _logger?.LogInformation("Created, restored, and built migration proxy project");
        }
    }
}
